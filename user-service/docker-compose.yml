# version: '3.8'

# services:
#   user-service:
#     build: 
#       context: .
#       dockerfile: Dockerfile
#     container_name: user-service
#     restart: unless-stopped
#     ports:
#       - "3001:3001"
#     environment:
#       - NODE_ENV=development
#       - PORT=3001
#       - MONGO_URI=mongodb://root:example@mongodb:27017/user-service?authSource=admin
#     depends_on:
#       mongodb:
#         condition: service_healthy
#     networks:
#       - blog-network
#     healthcheck:
#       test: [
#         "CMD-SHELL",
#         "powershell -command \"try { $response = Invoke-WebRequest http://localhost:3001/health -UseBasicParsing -TimeoutSec 3; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }\""
#       ]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 20s
#     volumes:
#       - ./:/app
#       - /app/node_modules

#   mongodb:
#     image: mongo:5.0
#     container_name: user-mongodb
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: example
#     volumes:
#       - user_mongodb_data:/data/db
#       - ./deployment/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
#     ports:
#       - "27017:27017"
#     networks:
#       - blog-network
#     healthcheck:
#       test: [
#         "CMD-SHELL",
#         "echo 'db.runCommand(\"ping\").ok' | mongosh --quiet -u root -p example localhost:27017/admin | grep 1"
#       ]
#       interval: 10s
#       timeout: 5s
#       retries: 5

# networks:
#   blog-network:
#     driver: bridge
#     name: blog-network

# volumes:
#   user_mongodb_data: